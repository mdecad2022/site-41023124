var tipuesearch = {"pages": [{'title': 'About', 'text': 'cmsite: wcms use  https://github.com/mdecycu/cmsimde  as submodule \n', 'tags': '', 'url': 'About.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation \n Variables \n Comments \n Numbers \n Strings \n print \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n \n \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'w1', 'text': '\n 中秋連假 放假。 \n', 'tags': '', 'url': 'w1.html'}, {'title': 'w2', 'text': '\n 建立 Github 建立倉儲。 \n 建立 Replit 帳號。 \n 建立 Onedrive帳號，並且使用 Team 程式進入班級課程及課程會議。 \n \n', 'tags': '', 'url': 'w2.html'}, {'title': 'w3', 'text': '建立課程帳號以及 replit 帳號 \n 1.透過 mdecad2022 的 organization 建立個人可以管理的倉儲 (site-Github_帳號) \n 2.利用 replit 帳號所啟動的動態網站進行內容管理 \n 3.動態轉為靜態網站內容之後, 要設法與 Github 倉儲同步. \n 之後申請帳號都使用 @nfu\xa0\xa0 電子郵箱 \xa0 \n 如 41023124@nfu.edu.tw \n', 'tags': '', 'url': 'w3.html'}, {'title': 'w4', 'text': '', 'tags': '', 'url': 'w4.html'}, {'title': '電腦輔助設計室 WIFI 連線', 'text': 'SSID: 810WIFI \xa0 \n 密碼: 056315360   \n 通訊協定: Wi-Fi 4 (802.11n) \xa0 \n 安全性類型: WPA2-Personal \xa0 \n 網路頻帶: 2.4 GHz \xa0 \n 網路通道: 9 \xa0 \n 連結速度 (接收/傳輸): 72/72 (Mbps) \xa0 \n IPv6 位址:\u202f \xa0 \n 連結-本機 IPv6 位址:\u202f \xa0 \n IPv6 DNS 伺服器:\u202f \xa0 \n IPv4 位址:\u202f \xa0 \n IPv4 DNS 伺服器:\u202f \xa0 \n 製造商: Realtek Semiconductor Corp. \xa0 \n 描述: Realtek RTL8188EU Wireless LAN 802.11n USB 2.0 Network Adapter \xa0 \n 驅動程式版本: 1030.38.712.2019 \xa0 \n 實體位址 (MAC): C4-6E-1F-10-C4-47 \xa0 \n \n', 'tags': '', 'url': '電腦輔助設計室 WIFI 連線.html'}, {'title': '第四週上課筆記', 'text': '在 Replit 執行動態網站: \xa0 \n 必須進入 Shell, 在倉儲根目錄執行下列兩則指令 (取下子模組內容, 並安裝執行所需模組). \xa0 \n git submodule update --init --recursive \xa0 \n pip install\xa0\xa0 flask flask_cors bs4 lxml pelican markdown gevent \xa0 \n \n 考試主機:\u202f\xa0 https://exam.cycu.org \u202f \n 進入考試網站進行考試 \n \n \n \n w4_cad2a \n 2022-09-30 14:08:28 \n 2022-10-01 14:08:28 \n 145.333 / 200.000 (73%) \n \n \n \n \xa0 \n', 'tags': '', 'url': '第四週上課筆記.html'}, {'title': 'w5', 'text': '透過 stud.cycu.org 執行動態網站 \n 1. Login to \xa0 https://mail.nfu.edu.tw \xa0 -\xa0 查看登入 stud.cycu.org 伺服器的帳號密碼, 帳號為 cad+學號, 密碼為四個字元, 包括數字與小寫英文字母 \xa0 。 \n 2. 請到 excel 檔案 \xa0 查詢 \xa0 stud.cycu.org 中與帳號對應的近端 (給 127.0.0.1 使用, 9 開頭的 port) 與遠端 (給 stud.cycu.org, 8 開頭的 port) 埠號  。 \n 3. 修改可攜 Python 3.10.6 start.bat, 蓋掉第三行後重新啟動, 目的希望將操作系統的命令搜尋路徑放在可攜目錄搜尋路徑之後 。 \n 4. 重新啟動可攜程式環境, 在其中一個命令列, ssh\xa0 \xa0 cad+學號@stud.cycu.org , 表示要使用 secure shell 遠端登入到 stud.cycu.org, 這是一台 Linux 主機, 安裝 Ubuntu 22.04 Server.(若使用的網路連線協定並無 IPv6,\xa0 可將系統的 proxy 設為 140.130.17.4:3128 kmolab/kmolab) \xa0 。 \n 5. 在 ssh 登入畫面, 以 ssh-keygen 建立 key pairs, .ssh/id_rsa 為 private key, id_rsa.pub 為 public key \xa0 。 \n 6. 設法利用 Filezilla, 以 sftp 安全的(Secure)檔案(File)傳輸(Transmission)協定(Protocol), 與 stud.cycu.org 伺服器連結 。 \n 7. 利用\xa0 Filezilla sftp 取下 id_rsa.pub, 登錄至 Github 帳號下的 Setting - >\xa0 SSH and GPG keys 。 \n 8. 對\xa0 server sftp 也可以利用\xa0 \xa0 Filezilla portable , 以圖形介面完成. 而 ssh 也可以透過\xa0 putty.exe 執行遠端登入 。 \n 9. 接下來要下載\xa0 \xa0 config \xa0 設定檔案,\xa0 以 sftp 放入 stud.cycu.org 主機的 .ssh 目錄中 。 \n 10. 接下來要在\xa0 Ubuntu (也就是 stud.cycu.org 這台主機所安裝的操作系統) 中, 設定 .gitconfig, 總共包含三項設定: git config --global user.name "scrum-1", git config --global user.email\xa0 "scrum1@mde.tw"\xa0\xa0 以及 git config --global http.proxy http://p42.cycu.org:3128, 這三個設定必須在 ssh 登入畫面中執行, 設定完成檔案會存入帳號根目錄中的 .gitconfig \xa0 。 \n 11. 利用\xa0  \xa0 git clone --recurse-submodules\xa0 \xa0 git@github.com:mdecad2022/site-個人github帳號.git \xa0\xa0   。 \n 12. 接著下載 \xa0 server.py , 在 Windows 編輯 \xa0 server.py , 將個人分配到的 9xxxx 埠號填入後存檔, 以 sftp 放入上列取下的倉儲根目錄 。 \n 13. 登入\xa0 Ubuntu 後, 會使用的指令: pwd 代表 print working directory, clear -\xa0 清除螢幕, cd - 更換目錄, ls -l 列出目錄詳細內容, chmod u+x \xa0 acp \xa0 表示讓 user 可以 execute acp script (能夠讓使用者以 source acp 加上提交字串進行 git add, git commit, git push, 如何在 Windows 執行 acp.bat 加上提交字串 。 \n', 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': '依照w5的步驟，建立自己的動態網站。 \n', 'tags': '', 'url': 'w6.html'}, {'title': 'w7', 'text': '依照w5的進度，然後針對同學們在進行時所遇到的問題並錄影解決，然後看著影片再針對自己的問題照著影片上處理，並成功建立自己的個人動態網站。 \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w8-9', 'text': '', 'tags': '', 'url': 'w8-9.html'}, {'title': 'w8', 'text': '進入考試網站  https://exam.cycu.org/  進行考試 \n \n \n \n w8_cad2a \n 2022-10-28 13:40:00 \n 2022-10-28 14:00:00 \n 64.000 / 100.000 (64%) \n \n \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n \n \n \n 零組件設計繪圖 \n \n \n \n \n \n \n \n 請參考  Design Day One  資料, 並根據以  STEP 242  格式轉入 NX2027 之  Drill Press 零組件檔案 各零件尺寸, 重新利用  NX2027  與  Onshape  繪製各零組件, 過程請以  Wink3  影片錄製繪圖步驟並在個人網頁中的 H1 格式, 標題為 w6 的頁面中呈現 . \n 下載 NX2027 lite 可攜版本 \n 下載 Solvespace 3.1 版 for Windows \n 在 Onshape 建立教育版帳號 \n \n \n 下載 server.py, acp, config 設定檔案 \n 下載 可攜的 filezilla \n \n \n \n 各學員 port 分配表 \n \n Onshape Solvespace NX 圖片 \n \n \n \n \n', 'tags': '', 'url': 'w8.html'}, {'title': 'w9', 'text': '期中考週 \n \n \n w9 期中考試時段 \n \n \n \n \n \n \n 電腦輔助設計與實習 2b w9 考試時間, 從 2022.11.03 13:40-14:20,  https://exam.cycu.org/ , 校外網段必須設定 140.130.17.4:3128 kmolab/kmolab 才能進入考試. \n 電腦輔助設計與實習 2a w9 考試時間, 從 2022.11.04 13:40-14:20,  https://exam.cycu.org/ , 校外網段必須設定 140.130.17.4:3128 kmolab/kmolab 才能進入考試. \n \n \n w9考試 \n 進入考試網站  https://exam.cycu.org/  進行考試 \n \n \n \n \n w9_cad2a \n 2022-11-04 13:40:00 \n 2022-11-04 14:20:00 \n 40.000 / 100.000 (40%) \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w9.html'}, {'title': 'w10', 'text': '期中考週後第二次考試 \n 進入考試網站  https://exam.cycu.org/  進行考試 \n \n \n \n w10_cad2a_quiz \n 2022-11-11 14:10:00 \n 2022-11-11 14:20:00 \n 40.000 / 100.000 (40%) \n \n \n \n  editor2 結束  \n \n \n \n w10 開始由各分組提供考試題庫 \n \n \n \n \n cad2022_tcexam_xml_templates.7z  為 NX-part 與 cadlab network setting 的題目檔案 \n 請各組依照相同格式, module name 選用 cad2022, 而 subject 則依照各組組序與命題週次命名, 例如: 2ag1-w6 表示由 2a 第一組針對 w6 的上課內容命題, 每一組題目至少 5 題, 至多 10 題, 每一題必須至少有 5 個正確敘述, 5 個錯誤敘述. \n w10 2b HW: 已知小考考試結果的  json 檔案內容 , \n \n 請問可否列出缺考人員名單? \n 可否列出第一欄位為修課人員學號, 第二欄位為小考成績? \n \n \n \n \n w10 HW2 web based NX \n \n \n \n \n \n \n 已知  block.prt  中 p8=59, p9=44, 請利用網際表單, 將 p8, p9 都改為 50 之後, 在瀏覽中提供新的 block_new.prt 檔案下載, 並直接在網頁上展示該零件的 STL 格式檔案. \n 範例程式: \n from flask import Flask, request # for NX2027 import NXOpen import NXOpen.UF import NXOpen.Gateway app = Flask(__name__) @app.route(\'/\') def index(): \xa0\xa0\xa0 return \'\'\' \xa0\xa0\xa0 <form action="/action" method="post"> \xa0\xa0\xa0 a: <input type="text" name="a" size="10"><br /> \xa0\xa0\xa0 b: <input type="text" name="b" size="10"><br /> \xa0\xa0\xa0 <input type="submit" value="send"> \xa0\xa0\xa0 </form> \xa0\xa0\xa0 \'\'\' @app.route(\'/action\', methods=[\'POST\']) def action(): \xa0\xa0\xa0 a = request.form[\'a\'] \xa0\xa0\xa0 b = request.form[\'b\'] \xa0\xa0\xa0 return "a: " + a +", " + "b: " + b @app.route(\'/nxopen\') def nxopen(): \xa0\xa0\xa0 # 取得目前開啟的工作階段 \xa0\xa0\xa0 theSession = NXOpen.Session.GetSession() \xa0\xa0\xa0 theUfSession = NXOpen.UF.UFSession.GetUFSession() \xa0\xa0\xa0\xa0 \xa0 \xa0\xa0\xa0 # 建立 ListingWindow \xa0\xa0\xa0 listWin= theSession.ListingWindow \xa0\xa0\xa0 # 開啟零件檔案 \xa0\xa0\xa0 basePart1 = theSession.Parts.OpenBaseDisplay("block.prt") \xa0\xa0\xa0 workPart = theSession.Parts.Work \xa0\xa0\xa0 unit1 = workPart.UnitCollection.FindObject("MilliMeter") \xa0\xa0\xa0 # height \xa0\xa0\xa0 p7 = workPart.Expressions.FindObject("p7") \xa0\xa0\xa0 # width \xa0\xa0\xa0 p8 = workPart.Expressions.FindObject("p8") \xa0\xa0\xa0 # length \xa0\xa0\xa0 p9 = workPart.Expressions.FindObject("p9") \xa0\xa0\xa0 workPart.Expressions.EditWithUnits(p7, unit1, "30") \xa0\xa0\xa0 workPart.Expressions.EditWithUnits(p8, unit1, "60") \xa0\xa0\xa0 workPart.Expressions.EditWithUnits(p9, unit1, "90") \xa0\xa0\xa0 theSession.UpdateManager.DoUpdate(0) \xa0\xa0\xa0 try: \xa0\xa0\xa0\xa0\xa0\xa0\xa0 saveStatus1 = workPart.SaveAs("block_new.prt") \xa0\xa0\xa0\xa0\xa0\xa0\xa0 saveStatus1.Dispose() \xa0\xa0\xa0 except: \xa0\xa0\xa0\xa0\xa0\xa0\xa0 pass \xa0\xa0\xa0 # initialize list to hold bodies \xa0\xa0\xa0 theBodyTags = [] \xa0 \xa0 \xa0\xa0\xa0 for x in workPart.Bodies: \xa0\xa0\xa0\xa0\xa0\xa0\xa0 if x.IsSolidBody: \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 theBodyTags.append(x.Tag) \xa0\xa0\xa0\xa0 \xa0 \xa0\xa0\xa0 # 準備輸出 ASCII 格式 STL 零件檔案 \xa0\xa0\xa0 sTLCreator1 = theSession.DexManager.CreateStlCreator() \xa0\xa0\xa0 sTLCreator1.AutoNormalGen = True \xa0\xa0\xa0 sTLCreator1.ChordalTol = 0.08 \xa0\xa0\xa0 sTLCreator1.AdjacencyTol = 0.08 \xa0\xa0\xa0 sTLCreator1.OutputFile = "block_ascii.stl" \xa0\xa0\xa0 # Binary STL: NXOpen.STLCreatorOutputTypeEnum.Binary \xa0\xa0\xa0 sTLCreator1.OutputType = NXOpen.STLCreatorOutputTypeEnum.Text \xa0\xa0\xa0 # 已知 body1 命名 \xa0\xa0\xa0 body1 = workPart.Bodies.FindObject("EXTRUDE(2)") \xa0\xa0\xa0 added1 = sTLCreator1.ExportSelectionBlock.Add(body1) \xa0\xa0\xa0 nXObject1 = sTLCreator1.Commit() \xa0\xa0\xa0 sTLCreator1.Destroy() \xa0  \xa0\xa0\xa0 # 開啟所建立的 ListingWindow \xa0\xa0\xa0 listWin.Open() \xa0\xa0\xa0 listWin.WriteLine("number of solid bodies: " + str(len(theBodyTags))) \xa0 \xa0 \xa0\xa0\xa0 (massProps, Stats) = theUfSession.Modeling.AskMassProps3d(theBodyTags, len(theBodyTags), 1, 4, .03, 1, [0.99,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]) \xa0\xa0\xa0 listWin.WriteLine("units: kg, mm") \xa0\xa0\xa0 listWin.WriteLine("surface area: " + str(massProps[0])) \xa0\xa0\xa0 listWin.WriteLine("volume: " + str(massProps[1]*1E9)) \xa0\xa0\xa0 # 在 ListingWindow 中寫入字串 \xa0\xa0\xa0 listWin.WriteLine("Hello, NXOpen") \xa0\xa0\xa0 listWin.Close() \xa0\xa0 \xa0 \xa0\xa0\xa0 return "mass: " + str(massProps[0]) \xa0 # app.run(host=ip, port=port, debug=True, ssl_context="adhoc") app.run(port=8123) \xa0\n \n \n \n \n \n \n \n \n \n \n \n \n 範例檔案:  w10_cad2022_solvespace_ex.7z \n \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11', 'text': '運動會放假', 'tags': '', 'url': 'w11.html'}, {'title': 'w12', 'text': '進入考試網站進行考試 :  https://exam.cycu.org/ \n 第一次 \n \n \n \n w12_cad2a \n 2022-11-25 13:35:00 \n 2022-11-25 13:45:00 \n 60.000 / 100.000 (60%) \n \n \n \n 第二次 \n \n \n \n w12_2a-1 \n 2022-11-25 16:00:00 \n 2022-11-25 16:10:00 \n 100.000 / 100.000 (100%) \n \n \n \n', 'tags': '', 'url': 'w12.html'}]};